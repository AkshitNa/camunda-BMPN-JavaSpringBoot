<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example.bankService</groupId>
  <artifactId>bank-service-application</artifactId>
  <version>1.0.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Spring Boot  ensures version compatibility
  between libraries to avoid conflicts. -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>3.3.3</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Camunda BOM (Bill Of Materials) — manages versions of all Camunda dependencies. -->
      <dependency>
        <groupId>org.camunda.bpm</groupId>
        <artifactId>camunda-bom</artifactId>
        <version>7.22.0</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Adds Camunda REST API — enables managing processes, tasks, and variables via HTTP.
    Allows you to interact with the process via Postman: start, get tasks, complete, etc. -->
    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>
    </dependency>

    <!-- Enables Camunda web interface:
 Tasklist, Cockpit, Admin.
 Allows UI access to view processes, complete tasks, manage users, etc. -->
    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>
    </dependency>

    <!-- Plugin for Camunda that adds support for complex object serialization
(e.g., JSON) via Spin.
Allows working with JSON/Java objects as process variables, including FEEL expressions. -->
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine-plugin-spin</artifactId>
    </dependency>


    <!-- Adds support for REST controllers, servlets, embedded Tomcat. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Connects the built-in in-memory H2 database. -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>

    <!-- Enables JDBC (database connection), DataSource, and connection pool.
    Required for database operations in Camunda and Spring Boot. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>

    <!-- camunda-spin-core + camunda-spin-dataformat-json-jackson:
    Adds Camunda Spin library + JSON support via Jackson.
    Allows:
    - Storing objects as JSON
    - Accessing object fields in forms as FEEl expressions, like: ${client.wallet.moneyCount} -->
    <dependency>
      <groupId>org.camunda.spin</groupId>
      <artifactId>camunda-spin-core</artifactId>
    </dependency>

    <!-- Generates getters/setters/toString, etc., using annotations like @Data, @Getter, @Builder.
    Reduces boilerplate code in Java.
    Marked as 'provided' — not included in final JAR, only used during compilation. -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.camunda.spin</groupId>
      <artifactId>camunda-spin-dataformat-json-jackson</artifactId>
    </dependency>

    <!-- JavaScript engine Nashorn (moved to a separate module after Java 15+).
    Required for using Script Tasks with JavaScript (e.g., Script Format: javascript). -->
    <dependency>
      <groupId>org.openjdk.nashorn</groupId>
      <artifactId>nashorn-core</artifactId>
      <version>15.4</version>
    </dependency>

    <!-- Adds convenient assertion syntax in tests. -->
    <!-- Adds support for testing Camunda processes:
 process execution,
 state verification,
 task and variable assertions. -->
    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter-test</artifactId>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.13.2</version>
      <scope>test</scope>
    </dependency>

    <!-- Extends JUnit 5 support for Camunda:
    annotations,
    utilities,
    helpful test rules.
    Makes it easier to write process tests with JUnit 5. -->
    <dependency>
      <groupId>org.camunda.bpm.extension</groupId>
      <artifactId>camunda-bpm-junit5</artifactId>
      <version>1.0.2</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.camunda.bpm.extension.mockito</groupId>
      <artifactId>camunda-bpm-mockito</artifactId>
      <version>5.16.0</version>
      <scope>test</scope>
    </dependency>


  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>3.3.3</version>
      </plugin>
    </plugins>
  </build>

</project>